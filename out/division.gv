digraph "Entity Relationship Diagram created by erdantic" {
	graph [fontcolor=gray66,
		fontname="Times New Roman,Times,Liberation Serif,serif",
		fontsize=9,
		label="Created by erdantic v1.1.0.post1 <https://github.com/drivendataorg/erdantic>",
		nodesep=0.5,
		rankdir=LR,
		ranksep=1.5
	];
	node [fontname="Times New Roman,Times,Liberation Serif,serif",
		fontsize=14,
		label="\N",
		shape=plain
	];
	edge [dir=both];
	"overture_schema_pydantic.divisions.Division"	[label=<<table border="0" cellborder="1" cellspacing="0"><tr><td port="_root" colspan="2"><b>Division</b></td></tr><tr><td>id</td><td port="id">str</td></tr><tr><td>geometry</td><td port="geometry">Geometry</td></tr><tr><td>type</td><td port="type">Literal['division']</td></tr><tr><td>sources</td><td port="sources">list[Source]</td></tr><tr><td>names</td><td port="names">Optional[Names]</td></tr></table>>,
		tooltip="overture_schema_pydantic.divisions.Division&#xA;&#xA;!!! abstract \"Usage Documentation\"&#xA;    [Models](../concepts/models.md)&#\
xA;&#xA;A base class for creating Pydantic models.&#xA;&#xA;Attributes:&#xA;    __class_vars__: The names of the class variables \
defined on the model.&#xA;    __private_attributes__: Metadata about the private attributes of the model.&#xA;    __signature__: \
The synthesized `__init__` [`Signature`][inspect.Signature] of the model.&#xA;&#xA;    __pydantic_complete__: Whether model building \
is completed, or if there are still undefined fields.&#xA;    __pydantic_core_schema__: The core schema of the model.&#xA;    __\
pydantic_custom_init__: Whether the model has a custom `__init__` function.&#xA;    __pydantic_decorators__: Metadata containing \
the decorators defined on the model.&#xA;        This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic \
V1.&#xA;    __pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#xA;        __\
args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.&#xA;    __pydantic_parent_namespace__: \
Parent namespace of the model, used for automatic rebuilding of models.&#xA;    __pydantic_post_init__: The name of the post-init \
method for the model, if defined.&#xA;    __pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel]\
.&#xA;    __pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.&#xA;    __pydantic_\
validator__: The `pydantic-core` `SchemaValidator` used to validate instances of the model.&#xA;&#xA;    __pydantic_fields__: A \
dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.&#xA;    __pydantic_computed_\
fields__: A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] \
objects.&#xA;&#xA;    __pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]&#\
xA;        is set to `'allow'`.&#xA;    __pydantic_fields_set__: The names of fields explicitly set during instantiation.&#xA;    __\
pydantic_private__: Values of private attributes set on the model instance.&#xA;"];
	"overture_schema_pydantic.names.Names"	[label=<<table border="0" cellborder="1" cellspacing="0"><tr><td port="_root" colspan="2"><b>Names</b></td></tr><tr><td>primary</td><td port="primary">str</td></tr><tr><td>common</td><td port="common">Optional[dict[LanguageTag, str]]</td></tr></table>>,
		tooltip="overture_schema_pydantic.names.Names&#xA;&#xA;!!! abstract \"Usage Documentation\"&#xA;    [Models](../concepts/models.md)&#xA;&#xA;\
A base class for creating Pydantic models.&#xA;&#xA;Attributes:&#xA;    __class_vars__: The names of the class variables defined \
on the model.&#xA;    __private_attributes__: Metadata about the private attributes of the model.&#xA;    __signature__: The synthesized `__\
init__` [`Signature`][inspect.Signature] of the model.&#xA;&#xA;    __pydantic_complete__: Whether model building is completed, \
or if there are still undefined fields.&#xA;    __pydantic_core_schema__: The core schema of the model.&#xA;    __pydantic_custom_\
init__: Whether the model has a custom `__init__` function.&#xA;    __pydantic_decorators__: Metadata containing the decorators \
defined on the model.&#xA;        This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#xA;    __\
pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#xA;        __args__, __origin__, __\
parameters__ in typing-module generics. May eventually be replaced by these.&#xA;    __pydantic_parent_namespace__: Parent namespace \
of the model, used for automatic rebuilding of models.&#xA;    __pydantic_post_init__: The name of the post-init method for the \
model, if defined.&#xA;    __pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].&#xA;    __\
pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.&#xA;    __pydantic_validator__: \
The `pydantic-core` `SchemaValidator` used to validate instances of the model.&#xA;&#xA;    __pydantic_fields__: A dictionary of \
field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.&#xA;    __pydantic_computed_fields__: A dictionary \
of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.&#xA;&#xA;    __\
pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]&#xA;        is set to `'allow'`\
.&#xA;    __pydantic_fields_set__: The names of fields explicitly set during instantiation.&#xA;    __pydantic_private__: Values \
of private attributes set on the model instance.&#xA;"];
	"overture_schema_pydantic.divisions.Division":names:e -> "overture_schema_pydantic.names.Names":_root:w	[arrowhead=noneteeodot,
		arrowtail=nonenone];
	"overture_schema_pydantic.source.Source"	[label=<<table border="0" cellborder="1" cellspacing="0"><tr><td port="_root" colspan="2"><b>Source</b></td></tr><tr><td>property</td><td port="property">str</td></tr><tr><td>dataset</td><td port="dataset">str</td></tr><tr><td>record_id</td><td port="record_id">Optional[str]</td></tr><tr><td>update_time</td><td port="update_time">Optional[datetime]</td></tr><tr><td>confidence</td><td port="confidence">Optional[float]</td></tr></table>>,
		tooltip="overture_schema_pydantic.source.Source&#xA;&#xA;!!! abstract \"Usage Documentation\"&#xA;    [Models](../concepts/models.md)&#xA;&#\
xA;A base class for creating Pydantic models.&#xA;&#xA;Attributes:&#xA;    __class_vars__: The names of the class variables defined \
on the model.&#xA;    __private_attributes__: Metadata about the private attributes of the model.&#xA;    __signature__: The synthesized `__\
init__` [`Signature`][inspect.Signature] of the model.&#xA;&#xA;    __pydantic_complete__: Whether model building is completed, \
or if there are still undefined fields.&#xA;    __pydantic_core_schema__: The core schema of the model.&#xA;    __pydantic_custom_\
init__: Whether the model has a custom `__init__` function.&#xA;    __pydantic_decorators__: Metadata containing the decorators \
defined on the model.&#xA;        This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#xA;    __\
pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#xA;        __args__, __origin__, __\
parameters__ in typing-module generics. May eventually be replaced by these.&#xA;    __pydantic_parent_namespace__: Parent namespace \
of the model, used for automatic rebuilding of models.&#xA;    __pydantic_post_init__: The name of the post-init method for the \
model, if defined.&#xA;    __pydantic_root_model__: Whether the model is a [`RootModel`][pydantic.root_model.RootModel].&#xA;    __\
pydantic_serializer__: The `pydantic-core` `SchemaSerializer` used to dump instances of the model.&#xA;    __pydantic_validator__: \
The `pydantic-core` `SchemaValidator` used to validate instances of the model.&#xA;&#xA;    __pydantic_fields__: A dictionary of \
field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.&#xA;    __pydantic_computed_fields__: A dictionary \
of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.&#xA;&#xA;    __\
pydantic_extra__: A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]&#xA;        is set to `'allow'`\
.&#xA;    __pydantic_fields_set__: The names of fields explicitly set during instantiation.&#xA;    __pydantic_private__: Values \
of private attributes set on the model instance.&#xA;"];
	"overture_schema_pydantic.divisions.Division":sources:e -> "overture_schema_pydantic.source.Source":_root:w	[arrowhead=crownone,
		arrowtail=nonenone];
}
